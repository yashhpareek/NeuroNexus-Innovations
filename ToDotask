#include<bits/stdc++.h>
using namespace std;

class Task {
private:
    string description;

public:
    Task(const string &desc) : description(desc) {}

    void setDescription(const string &desc) {
        description = desc;
    }

    string getDescription() const {
        return description;
    }
};

class TodoList {
private:
    vector<Task> tasks;

public:
    void addTask(const string &desc) {
        tasks.emplace_back(desc);
    }

    void removeTask(int index) {
        if (index < 0 || index >= tasks.size()) {
            cout << "Invalid task index!" << endl;
            return;
        }
        tasks.erase(tasks.begin() + index);
    }

    void displayTasks() const {
        if (tasks.empty()) {
            cout << "No tasks available!" << endl;
            return;
        }
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].getDescription() << endl;
        }
    }
};

int main() {
    TodoList list;
    int choice;

    do {
        cout << "\nTo-Do List App:\n";
        cout << "1. Add Task\n";
        cout << "2. Remove Task\n";
        cout << "3. Display Tasks\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1: {
                string desc;
                cout << "Enter the task : ";
                getline(cin, desc);
                list.addTask(desc);
                break;
            }
            case 2: {
                int index;
                cout << "Enter the task index to remove: ";
                cin >> index;
                list.removeTask(index - 1);
                break;
            }
            case 3:
                list.displayTasks();
                break;
            case 4:
                cout << "Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
                break;
        }

    } while (choice != 4);

    return 0;
}
